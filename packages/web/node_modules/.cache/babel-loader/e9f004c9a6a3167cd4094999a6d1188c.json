{"ast":null,"code":"import _classCallCheck from \"/Users/omergoldberg/dev/rtl/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/omergoldberg/dev/rtl/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/omergoldberg/dev/rtl/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/omergoldberg/dev/rtl/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/omergoldberg/dev/rtl/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/omergoldberg/dev/rtl/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport color from 'color';\nimport { Animated, StyleSheet } from 'react-native';\nimport AnimatedText from './Typography/AnimatedText';\nimport { withTheme } from '../core/theming';\n/**\n * Helper text is used in conjuction with input elements to provide additional hints for the user.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/helper-text.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { HelperText, TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *    const onChangeText = text => setText(text);\n *\n *   const hasErrors = () => {\n *     return !text.includes('@');\n *   };\n *\n *  return (\n *     <View>\n *       <TextInput label=\"Email\" value={text} onChangeText={onChangeText} />\n *       <HelperText type=\"error\" visible={hasErrors()}>\n *         Email address is invalid!\n *       </HelperText>\n *     </View>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nvar HelperText = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(HelperText, _React$PureComponent);\n\n  var _super = _createSuper(HelperText);\n\n  function HelperText() {\n    var _this;\n\n    _classCallCheck(this, HelperText);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      shown: new Animated.Value(_this.props.visible ? 1 : 0),\n      textHeight: 0\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"showText\", function () {\n      var scale = _this.props.theme.animation.scale;\n      Animated.timing(_this.state.shown, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true\n      }).start();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"hideText\", function () {\n      var scale = _this.props.theme.animation.scale;\n      Animated.timing(_this.state.shown, {\n        toValue: 0,\n        duration: 180 * scale,\n        useNativeDriver: true\n      }).start();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleTextLayout\", function (e) {\n      //@ts-ignore Animated.Text typings are improved but something is still broken. It thinks onLayout is not callable.\n      _this.props.onLayout && _this.props.onLayout(e);\n\n      _this.setState({\n        textHeight: e.nativeEvent.layout.height\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(HelperText, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (prevProps.visible !== this.props.visible || prevState.textHeight !== this.state.textHeight) {\n        if (this.props.visible) {\n          this.showText();\n        } else {\n          this.hideText();\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          style = _this$props.style,\n          type = _this$props.type,\n          visible = _this$props.visible,\n          theme = _this$props.theme,\n          onLayout = _this$props.onLayout,\n          padding = _this$props.padding,\n          rest = _objectWithoutProperties(_this$props, [\"style\", \"type\", \"visible\", \"theme\", \"onLayout\", \"padding\"]);\n\n      var colors = theme.colors,\n          dark = theme.dark;\n      var textColor = this.props.type === 'error' ? colors.error : color(colors.text).alpha(dark ? 0.7 : 0.54).rgb().string();\n      return (\n        /*#__PURE__*/\n        // @ts-ignore\n        React.createElement(AnimatedText, _extends({\n          onLayout: this.handleTextLayout,\n          style: [styles.text, padding !== 'none' ? styles.padding : {}, {\n            color: textColor,\n            opacity: this.state.shown,\n            transform: visible && type === 'error' ? [{\n              translateY: this.state.shown.interpolate({\n                inputRange: [0, 1],\n                outputRange: [-this.state.textHeight / 2, 0]\n              })\n            }] : []\n          }, style]\n        }, rest), this.props.children)\n      );\n    }\n  }]);\n\n  return HelperText;\n}(React.PureComponent);\n\n_defineProperty(HelperText, \"defaultProps\", {\n  type: 'info',\n  padding: 'normal',\n  visible: true\n});\n\nvar styles = StyleSheet.create({\n  text: {\n    fontSize: 12,\n    paddingVertical: 4\n  },\n  padding: {\n    paddingHorizontal: 12\n  }\n});\nexport default withTheme(HelperText);","map":null,"metadata":{},"sourceType":"module"}