{"ast":null,"code":"import _classCallCheck from \"/Users/omergoldberg/dev/rtl/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/omergoldberg/dev/rtl/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/omergoldberg/dev/rtl/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/omergoldberg/dev/rtl/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/omergoldberg/dev/rtl/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/omergoldberg/dev/rtl/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { Animated, Platform, StyleSheet, View, I18nManager } from 'react-native';\nimport setColor from 'color';\nimport { withTheme } from '../core/theming';\nvar INDETERMINATE_DURATION = 2000;\nvar INDETERMINATE_MAX_WIDTH = 0.6;\nvar isRTL = I18nManager.isRTL;\n/**\n * Progress bar is an indicator used to present progress of some activity in the app.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/progress-bar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ProgressBar, Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <ProgressBar progress={0.5} color={Colors.red800} />\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nvar ProgressBar = /*#__PURE__*/function (_React$Component) {\n  _inherits(ProgressBar, _React$Component);\n\n  var _super = _createSuper(ProgressBar);\n\n  function ProgressBar() {\n    var _this;\n\n    _classCallCheck(this, ProgressBar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      width: 0,\n      timer: new Animated.Value(0),\n      fade: new Animated.Value(0)\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"indeterminateAnimation\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"onLayout\", function (event) {\n      var visible = _this.props.visible;\n      var previousWidth = _this.state.width;\n\n      _this.setState({\n        width: event.nativeEvent.layout.width\n      }, function () {\n        // Start animation the very first time when previously the width was unclear\n        if (visible && previousWidth === 0) {\n          _this.startAnimation();\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"startAnimation\", function () {\n      var _this$props2 = _this.props,\n          indeterminate = _this$props2.indeterminate,\n          progress = _this$props2.progress,\n          scale = _this$props2.theme.animation.scale;\n      var _this$state = _this.state,\n          fade = _this$state.fade,\n          timer = _this$state.timer; // Show progress bar\n\n      Animated.timing(fade, {\n        duration: 200 * scale,\n        toValue: 1,\n        useNativeDriver: true,\n        isInteraction: false\n      }).start(); // Animate progress bar\n\n      if (indeterminate) {\n        if (!_this.indeterminateAnimation) {\n          _this.indeterminateAnimation = Animated.timing(timer, {\n            duration: INDETERMINATE_DURATION,\n            toValue: 1,\n            // Animated.loop does not work if useNativeDriver is true on web\n            useNativeDriver: Platform.OS !== 'web',\n            isInteraction: false\n          });\n        } // Reset timer to the beginning\n\n\n        timer.setValue(0);\n        Animated.loop(_this.indeterminateAnimation).start();\n      } else {\n        Animated.timing(timer, {\n          duration: 200 * scale,\n          toValue: progress ? progress : 0,\n          useNativeDriver: true,\n          isInteraction: false\n        }).start();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"stopAnimation\", function () {\n      var fade = _this.state.fade;\n      var scale = _this.props.theme.animation.scale; // Stop indeterminate animation\n\n      if (_this.indeterminateAnimation) {\n        _this.indeterminateAnimation.stop();\n      }\n\n      Animated.timing(fade, {\n        duration: 200 * scale,\n        toValue: 0,\n        useNativeDriver: true,\n        isInteraction: false\n      }).start();\n    });\n\n    return _this;\n  }\n\n  _createClass(ProgressBar, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props3 = this.props,\n          visible = _this$props3.visible,\n          progress = _this$props3.progress;\n\n      if (progress !== prevProps.progress || visible !== prevProps.visible) {\n        if (visible) {\n          this.startAnimation();\n        } else {\n          this.stopAnimation();\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          color = _this$props.color,\n          indeterminate = _this$props.indeterminate,\n          style = _this$props.style,\n          theme = _this$props.theme,\n          progress = _this$props.progress,\n          visible = _this$props.visible,\n          rest = _objectWithoutProperties(_this$props, [\"color\", \"indeterminate\", \"style\", \"theme\", \"progress\", \"visible\"]);\n\n      var _this$state2 = this.state,\n          fade = _this$state2.fade,\n          timer = _this$state2.timer,\n          width = _this$state2.width;\n      var tintColor = color || theme.colors.primary;\n      var trackTintColor = setColor(tintColor).alpha(0.38).rgb().string();\n      return /*#__PURE__*/React.createElement(View, _extends({\n        onLayout: this.onLayout\n      }, rest), /*#__PURE__*/React.createElement(Animated.View, {\n        style: [styles.container, {\n          backgroundColor: trackTintColor,\n          opacity: fade\n        }, style]\n      }, /*#__PURE__*/React.createElement(Animated.View, {\n        style: [styles.progressBar, {\n          backgroundColor: tintColor,\n          width: width,\n          transform: [{\n            translateX: timer.interpolate(indeterminate ? {\n              inputRange: [0, 0.5, 1],\n              outputRange: [(isRTL ? 1 : -1) * 0.5 * width, (isRTL ? 1 : -1) * 0.5 * INDETERMINATE_MAX_WIDTH * width, (isRTL ? -1 : 1) * 0.7 * width]\n            } : {\n              inputRange: [0, 1],\n              outputRange: [(isRTL ? 1 : -1) * 0.5 * width, 0]\n            })\n          }, {\n            // Workaround for workaround for https://github.com/facebook/react-native/issues/6278\n            scaleX: timer.interpolate(indeterminate ? {\n              inputRange: [0, 0.5, 1],\n              outputRange: [0.0001, INDETERMINATE_MAX_WIDTH, 0.0001]\n            } : {\n              inputRange: [0, 1],\n              outputRange: [0.0001, 1]\n            })\n          }]\n        }]\n      })));\n    }\n  }]);\n\n  return ProgressBar;\n}(React.Component);\n\n_defineProperty(ProgressBar, \"defaultProps\", {\n  visible: true,\n  progress: 0\n});\n\nvar styles = StyleSheet.create({\n  container: {\n    height: 4,\n    overflow: 'hidden'\n  },\n  progressBar: {\n    flex: 1\n  }\n});\nexport default withTheme(ProgressBar);","map":null,"metadata":{},"sourceType":"module"}