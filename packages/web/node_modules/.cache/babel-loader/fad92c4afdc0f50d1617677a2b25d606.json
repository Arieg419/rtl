{"ast":null,"code":"import _classCallCheck from \"/Users/omergoldberg/dev/rtl/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/omergoldberg/dev/rtl/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/omergoldberg/dev/rtl/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/omergoldberg/dev/rtl/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/omergoldberg/dev/rtl/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/omergoldberg/dev/rtl/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport color from 'color';\nimport * as React from 'react';\nimport { View, StyleSheet, I18nManager } from 'react-native';\nimport TouchableRipple from '../TouchableRipple';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport { ListAccordionGroupContext } from './ListAccordionGroup';\n/**\n * A component used to display an expandable list item.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-accordion-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [expanded, setExpanded] = React.useState(true);\n *\n *   const handlePress = () => setExpanded(!expanded);\n *\n *   return (\n *     <List.Section title=\"Accordions\">\n *       <List.Accordion\n *         title=\"Uncontrolled Accordion\"\n *         left={props => <List.Icon {...props} icon=\"folder\" />}>\n *         <List.Item title=\"First item\" />\n *         <List.Item title=\"Second item\" />\n *       </List.Accordion>\n *\n *       <List.Accordion\n *         title=\"Controlled Accordion\"\n *         left={props => <List.Icon {...props} icon=\"folder\" />}\n *         expanded={expanded}\n *         onPress={handlePress}>\n *         <List.Item title=\"First item\" />\n *         <List.Item title=\"Second item\" />\n *       </List.Accordion>\n *     </List.Section>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nvar ListAccordion = /*#__PURE__*/function (_React$Component) {\n  _inherits(ListAccordion, _React$Component);\n\n  var _super = _createSuper(ListAccordion);\n\n  function ListAccordion() {\n    var _this;\n\n    _classCallCheck(this, ListAccordion);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      expanded: _this.props.expanded || false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handlePress\", function () {\n      _this.props.onPress && _this.props.onPress();\n\n      if (_this.props.expanded === undefined) {\n        // Only update state of the `expanded` prop was not passed\n        // If it was passed, the component will act as a controlled component\n        _this.setState(function (state) {\n          return {\n            expanded: !state.expanded\n          };\n        });\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(ListAccordion, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          left = _this$props.left,\n          title = _this$props.title,\n          description = _this$props.description,\n          children = _this$props.children,\n          theme = _this$props.theme,\n          titleStyle = _this$props.titleStyle,\n          descriptionStyle = _this$props.descriptionStyle,\n          titleNumberOfLines = _this$props.titleNumberOfLines,\n          descriptionNumberOfLines = _this$props.descriptionNumberOfLines,\n          style = _this$props.style,\n          id = _this$props.id,\n          testID = _this$props.testID;\n      var titleColor = color(theme.colors.text).alpha(0.87).rgb().string();\n      var descriptionColor = color(theme.colors.text).alpha(0.54).rgb().string();\n      var expandedInternal = this.props.expanded !== undefined ? this.props.expanded : this.state.expanded;\n      return /*#__PURE__*/React.createElement(ListAccordionGroupContext.Consumer, null, function (groupContext) {\n        if (groupContext !== null && !id) {\n          throw new Error('List.Accordion is used inside a List.AccordionGroup without specifying an id prop.');\n        }\n\n        var expanded = groupContext ? groupContext.expandedId === id : expandedInternal;\n        var handlePress = groupContext && id !== undefined ? function () {\n          return groupContext.onAccordionPress(id);\n        } : _this2.handlePress;\n        return /*#__PURE__*/React.createElement(View, null, /*#__PURE__*/React.createElement(TouchableRipple, {\n          style: [styles.container, style],\n          onPress: handlePress,\n          accessibilityTraits: \"button\",\n          accessibilityComponentType: \"button\",\n          accessibilityRole: \"button\",\n          testID: testID\n        }, /*#__PURE__*/React.createElement(View, {\n          style: styles.row,\n          pointerEvents: \"none\"\n        }, left ? left({\n          color: expanded ? theme.colors.primary : descriptionColor\n        }) : null, /*#__PURE__*/React.createElement(View, {\n          style: [styles.item, styles.content]\n        }, /*#__PURE__*/React.createElement(Text, {\n          numberOfLines: titleNumberOfLines,\n          style: [styles.title, {\n            color: expanded ? theme.colors.primary : titleColor\n          }, titleStyle]\n        }, title), description && /*#__PURE__*/React.createElement(Text, {\n          numberOfLines: descriptionNumberOfLines,\n          style: [styles.description, {\n            color: descriptionColor\n          }, descriptionStyle]\n        }, description)), /*#__PURE__*/React.createElement(View, {\n          style: [styles.item, description ? styles.multiline : undefined]\n        }, /*#__PURE__*/React.createElement(MaterialCommunityIcon, {\n          name: expanded ? 'chevron-up' : 'chevron-down',\n          color: titleColor,\n          size: 24,\n          direction: I18nManager.isRTL ? 'rtl' : 'ltr'\n        })))), expanded ? React.Children.map(children, function (child) {\n          if (left && /*#__PURE__*/React.isValidElement(child) && !child.props.left && !child.props.right) {\n            return /*#__PURE__*/React.cloneElement(child, {\n              style: [styles.child, child.props.style]\n            });\n          }\n\n          return child;\n        }) : null);\n      });\n    }\n  }]);\n\n  return ListAccordion;\n}(React.Component);\n\n_defineProperty(ListAccordion, \"displayName\", 'List.Accordion');\n\n_defineProperty(ListAccordion, \"defaultProps\", {\n  titleNumberOfLines: 1,\n  descriptionNumberOfLines: 2\n});\n\nvar styles = StyleSheet.create({\n  container: {\n    padding: 8\n  },\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  multiline: {\n    height: 40,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  title: {\n    fontSize: 16\n  },\n  description: {\n    fontSize: 14\n  },\n  item: {\n    margin: 8\n  },\n  child: {\n    paddingLeft: 64\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center'\n  }\n});\nexport default withTheme(ListAccordion);","map":null,"metadata":{},"sourceType":"module"}