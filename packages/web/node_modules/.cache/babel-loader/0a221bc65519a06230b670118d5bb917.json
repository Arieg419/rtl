{"ast":null,"code":"import _classCallCheck from \"/Users/omergoldberg/dev/rtl/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/omergoldberg/dev/rtl/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/omergoldberg/dev/rtl/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/omergoldberg/dev/rtl/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/omergoldberg/dev/rtl/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { View, Platform, StyleSheet } from 'react-native';\nimport color from 'color';\nimport AppbarContent from './AppbarContent';\nimport AppbarAction from './AppbarAction';\nimport AppbarBackAction from './AppbarBackAction'; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nimport AppbarHeader from './AppbarHeader';\nimport Surface from '../Surface';\nimport { withTheme } from '../../core/theming';\nimport { black, white } from '../../styles/colors';\nimport overlay from '../../styles/overlay';\nexport var DEFAULT_APPBAR_HEIGHT = 56;\n/**\n * A component to display action items in a bar. It can be placed at the top or bottom.\n * The top bar usually contains the screen title, controls such as navigation buttons, menu button etc.\n * The bottom bar usually provides access to a drawer and up to four actions.\n *\n * By default Appbar uses primary color as a background, in dark theme with `adaptive` mode it will use surface colour instead.\n * See [Dark Theme](https://callstack.github.io/react-native-paper/theming.html#dark-theme) for more informations\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/appbar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Appbar } from 'react-native-paper';\n * import { StyleSheet } from 'react-native';\n *\n * const MyComponent = () => (\n *  <Appbar style={styles.bottom}>\n *    <Appbar.Action\n *      icon=\"archive\"\n *      onPress={() => console.log('Pressed archive')}\n *     />\n *     <Appbar.Action icon=\"mail\" onPress={() => console.log('Pressed mail')} />\n *     <Appbar.Action icon=\"label\" onPress={() => console.log('Pressed label')} />\n *     <Appbar.Action\n *       icon=\"delete\"\n *       onPress={() => console.log('Pressed delete')}\n *     />\n *   </Appbar>\n *  );\n *\n * export default MyComponent\n *\n * const styles = StyleSheet.create({\n *   bottom: {\n *     position: 'absolute',\n *     left: 0,\n *     right: 0,\n *     bottom: 0,\n *   },\n * });\n * ```\n */\n\nvar Appbar = /*#__PURE__*/function (_React$Component) {\n  _inherits(Appbar, _React$Component);\n\n  var _super = _createSuper(Appbar);\n\n  function Appbar() {\n    _classCallCheck(this, Appbar);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Appbar, [{\n    key: \"render\",\n    // @component ./AppbarContent.tsx\n    // @component ./AppbarAction.tsx\n    // @component ./AppbarBackAction.tsx\n    // @component ./AppbarHeader.tsx\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          dark = _this$props.dark,\n          style = _this$props.style,\n          theme = _this$props.theme,\n          rest = _objectWithoutProperties(_this$props, [\"children\", \"dark\", \"style\", \"theme\"]);\n\n      var colors = theme.colors,\n          isDarkTheme = theme.dark,\n          mode = theme.mode;\n\n      var _ref = StyleSheet.flatten(style) || {},\n          customBackground = _ref.backgroundColor,\n          _ref$elevation = _ref.elevation,\n          elevation = _ref$elevation === void 0 ? 4 : _ref$elevation,\n          restStyle = _objectWithoutProperties(_ref, [\"backgroundColor\", \"elevation\"]);\n\n      var isDark;\n      var backgroundColor = customBackground ? customBackground : isDarkTheme && mode === 'adaptive' ? overlay(elevation, colors.surface) : colors.primary;\n\n      if (typeof dark === 'boolean') {\n        isDark = dark;\n      } else {\n        isDark = backgroundColor === 'transparent' ? false : !color(backgroundColor).isLight();\n      }\n\n      var shouldCenterContent = false;\n      var shouldAddLeftSpacing = false;\n      var shouldAddRightSpacing = false;\n\n      if (Platform.OS === 'ios') {\n        var hasAppbarContent = false;\n        var leftItemsCount = 0;\n        var rightItemsCount = 0;\n        React.Children.forEach(children, function (child) {\n          if ( /*#__PURE__*/React.isValidElement(child)) {\n            if (child.type === AppbarContent) {\n              hasAppbarContent = true;\n            } else if (hasAppbarContent) {\n              rightItemsCount++;\n            } else {\n              leftItemsCount++;\n            }\n          }\n        });\n        shouldCenterContent = hasAppbarContent && leftItemsCount < 2 && rightItemsCount < 2;\n        shouldAddLeftSpacing = shouldCenterContent && leftItemsCount === 0;\n        shouldAddRightSpacing = shouldCenterContent && rightItemsCount === 0;\n      }\n\n      return /*#__PURE__*/React.createElement(Surface //@ts-ignore\n      , _extends({\n        style: [{\n          backgroundColor: backgroundColor\n        }, styles.appbar, {\n          elevation: elevation\n        }, restStyle]\n      }, rest), shouldAddLeftSpacing ? /*#__PURE__*/React.createElement(View, {\n        style: styles.spacing\n      }) : null, React.Children.toArray(children).filter(function (child) {\n        return child != null && typeof child !== 'boolean';\n      }).map(function (child, i) {\n        if (! /*#__PURE__*/React.isValidElement(child) || ![AppbarContent, AppbarAction, AppbarBackAction // @ts-ignore\n        ].includes(child.type)) {\n          return child;\n        }\n\n        var props = {\n          color: typeof child.props.color !== 'undefined' ? child.props.color : isDark ? white : black\n        };\n\n        if (child.type === AppbarContent) {\n          props.style = [// Since content is not first item, add extra left margin\n          i !== 0 && {\n            marginLeft: 8\n          }, shouldCenterContent && {\n            alignItems: 'center'\n          }, child.props.style];\n        }\n\n        return /*#__PURE__*/React.cloneElement(child, props);\n      }), shouldAddRightSpacing ? /*#__PURE__*/React.createElement(View, {\n        style: styles.spacing\n      }) : null);\n    }\n  }]);\n\n  return Appbar;\n}(React.Component);\n\n_defineProperty(Appbar, \"Content\", AppbarContent);\n\n_defineProperty(Appbar, \"Action\", AppbarAction);\n\n_defineProperty(Appbar, \"BackAction\", AppbarBackAction);\n\n_defineProperty(Appbar, \"Header\", AppbarHeader);\n\nvar styles = StyleSheet.create({\n  appbar: {\n    height: DEFAULT_APPBAR_HEIGHT,\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 4,\n    elevation: 4\n  },\n  spacing: {\n    width: 48\n  }\n});\nexport default withTheme(Appbar);","map":null,"metadata":{},"sourceType":"module"}