{"ast":null,"code":"import _classCallCheck from \"/Users/omergoldberg/dev/rtl/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/omergoldberg/dev/rtl/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/omergoldberg/dev/rtl/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/omergoldberg/dev/rtl/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/omergoldberg/dev/rtl/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/omergoldberg/dev/rtl/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { TouchableWithoutFeedback, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport { withTheme } from '../../core/theming';\n/**\n * A wrapper for views that should respond to touches.\n * Provides a material \"ink ripple\" interaction effect for supported platforms (>= Android Lollipop).\n * On unsupported platforms, it falls back to a highlight effect.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/touchable-ripple.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Text, TouchableRipple } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <TouchableRipple\n *     onPress={() => console.log('Pressed')}\n *     rippleColor=\"rgba(0, 0, 0, .32)\"\n *   >\n *     <Text>Press anywhere</Text>\n *   </TouchableRipple>\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nvar TouchableRipple = /*#__PURE__*/function (_React$Component) {\n  _inherits(TouchableRipple, _React$Component);\n\n  var _super = _createSuper(TouchableRipple);\n\n  function TouchableRipple() {\n    var _this;\n\n    _classCallCheck(this, TouchableRipple);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"handlePressIn\", function (e) {\n      var _this$props2 = _this.props,\n          centered = _this$props2.centered,\n          rippleColor = _this$props2.rippleColor,\n          onPressIn = _this$props2.onPressIn,\n          theme = _this$props2.theme;\n      onPressIn === null || onPressIn === void 0 ? void 0 : onPressIn(e);\n      var dark = theme.dark,\n          colors = theme.colors;\n      var calculatedRippleColor = rippleColor || color(colors.text).alpha(dark ? 0.32 : 0.2).rgb().string();\n      var button = e.currentTarget;\n      var style = window.getComputedStyle(button);\n      var dimensions = button.getBoundingClientRect();\n      var touchX;\n      var touchY;\n\n      if (centered) {\n        touchX = dimensions.width / 2;\n        touchY = dimensions.height / 2;\n      } else {\n        var _touches$, _touch$pageX, _touch$pageY;\n\n        var _e$nativeEvent = e.nativeEvent,\n            changedTouches = _e$nativeEvent.changedTouches,\n            touches = _e$nativeEvent.touches;\n        var touch = (_touches$ = touches === null || touches === void 0 ? void 0 : touches[0]) !== null && _touches$ !== void 0 ? _touches$ : changedTouches === null || changedTouches === void 0 ? void 0 : changedTouches[0];\n        var startX = (_touch$pageX = touch.pageX) !== null && _touch$pageX !== void 0 ? _touch$pageX : e.pageX;\n        var startY = (_touch$pageY = touch.pageY) !== null && _touch$pageY !== void 0 ? _touch$pageY : e.pageY;\n        touchX = startX - dimensions.left;\n        touchY = startY - dimensions.top;\n      } // Get the size of the button to determine how big the ripple should be\n\n\n      var size = centered ? // If ripple is always centered, we don't need to make it too big\n      Math.min(dimensions.width, dimensions.height) * 1.25 : // Otherwise make it twice as big so clicking on one end spreads ripple to other\n      Math.max(dimensions.width, dimensions.height) * 2; // Create a container for our ripple effect so we don't need to change the parent's style\n\n      var container = document.createElement('span');\n      container.setAttribute('data-paper-ripple', '');\n      Object.assign(container.style, {\n        position: 'absolute',\n        pointerEvents: 'none',\n        top: '0',\n        left: '0',\n        right: '0',\n        bottom: '0',\n        borderTopLeftRadius: style.borderTopLeftRadius,\n        borderTopRightRadius: style.borderTopRightRadius,\n        borderBottomRightRadius: style.borderBottomRightRadius,\n        borderBottomLeftRadius: style.borderBottomLeftRadius,\n        overflow: centered ? 'visible' : 'hidden'\n      }); // Create span to show the ripple effect\n\n      var ripple = document.createElement('span');\n      Object.assign(ripple.style, {\n        position: 'absolute',\n        pointerEvents: 'none',\n        backgroundColor: calculatedRippleColor,\n        borderRadius: '50%',\n\n        /* Transition configuration */\n        transitionProperty: 'transform opacity',\n        transitionDuration: \"\".concat(Math.min(size * 1.5, 350), \"ms\"),\n        transitionTimingFunction: 'linear',\n        transformOrigin: 'center',\n\n        /* We'll animate these properties */\n        transform: 'translate3d(-50%, -50%, 0) scale3d(0.1, 0.1, 0.1)',\n        opacity: '0.5',\n        // Position the ripple where cursor was\n        left: \"\".concat(touchX, \"px\"),\n        top: \"\".concat(touchY, \"px\"),\n        width: \"\".concat(size, \"px\"),\n        height: \"\".concat(size, \"px\")\n      }); // Finally, append it to DOM\n\n      container.appendChild(ripple);\n      button.appendChild(container); // rAF runs in the same frame as the event handler\n      // Use double rAF to ensure the transition class is added in next frame\n      // This will make sure that the transition animation is triggered\n\n      requestAnimationFrame(function () {\n        requestAnimationFrame(function () {\n          Object.assign(ripple.style, {\n            transform: 'translate3d(-50%, -50%, 0) scale3d(1, 1, 1)',\n            opacity: '1'\n          });\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handlePressOut\", function (e) {\n      _this.props.onPressOut && _this.props.onPressOut(e);\n      var containers = e.currentTarget.querySelectorAll('[data-paper-ripple]');\n      requestAnimationFrame(function () {\n        requestAnimationFrame(function () {\n          containers.forEach(function (container) {\n            // @ts-ignore\n            var ripple = container.firstChild; // @ts-ignore\n\n            Object.assign(ripple.style, {\n              transitionDuration: '250ms',\n              opacity: 0\n            }); // Finally remove the span after the transition\n\n            setTimeout(function () {\n              // @ts-ignore\n              var parentNode = container.parentNode;\n\n              if (parentNode) {\n                parentNode.removeChild(container);\n              }\n            }, 500);\n          });\n        });\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(TouchableRipple, [{\n    key: \"render\",\n    value: function render() {\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      var _this$props = this.props,\n          style = _this$props.style,\n          background = _this$props.background,\n          borderless = _this$props.borderless,\n          disabledProp = _this$props.disabled,\n          rippleColor = _this$props.rippleColor,\n          underlayColor = _this$props.underlayColor,\n          children = _this$props.children,\n          theme = _this$props.theme,\n          rest = _objectWithoutProperties(_this$props, [\"style\", \"background\", \"borderless\", \"disabled\", \"rippleColor\", \"underlayColor\", \"children\", \"theme\"]);\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n\n\n      var disabled = disabledProp || !this.props.onPress;\n      return /*#__PURE__*/React.createElement(TouchableWithoutFeedback, _extends({}, rest, {\n        onPressIn: this.handlePressIn,\n        onPressOut: this.handlePressOut,\n        disabled: disabled\n      }), /*#__PURE__*/React.createElement(View, {\n        style: [styles.touchable, borderless && styles.borderless, style]\n      }, React.Children.only(children)));\n    }\n  }]);\n\n  return TouchableRipple;\n}(React.Component);\n\n_defineProperty(TouchableRipple, \"defaultProps\", {\n  borderless: false\n});\n\n_defineProperty(TouchableRipple, \"supported\", true);\n\nvar styles = StyleSheet.create({\n  touchable: {\n    position: 'relative'\n  },\n  borderless: {\n    overflow: 'hidden'\n  }\n});\nexport default withTheme(TouchableRipple);","map":null,"metadata":{},"sourceType":"module"}