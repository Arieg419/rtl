{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport { StyleSheet, Text, Platform } from 'react-native';\nvar MaterialCommunityIcons;\n\ntry {\n  // Optionally require vector-icons\n  MaterialCommunityIcons = require('react-native-vector-icons/MaterialCommunityIcons').default;\n} catch (e) {\n  if ( // @ts-ignore\n  global.__expo && // @ts-ignore\n  global.__expo.Icon && // @ts-ignore\n  global.__expo.Icon.MaterialCommunityIcons) {\n    // Snack doesn't properly bundle vector icons from subpath\n    // Use icons from the __expo global if available\n    // @ts-ignore\n    MaterialCommunityIcons = global.__expo.Icon.MaterialCommunityIcons;\n  } else {\n    var isErrorLogged = false; // Fallback component for icons\n    // @ts-ignore\n\n    MaterialCommunityIcons = function MaterialCommunityIcons(_ref) {\n      var name = _ref.name,\n          color = _ref.color,\n          size = _ref.size,\n          rest = _objectWithoutProperties(_ref, [\"name\", \"color\", \"size\"]);\n      /* eslint-disable no-console */\n\n\n      if (!isErrorLogged) {\n        if (!/(Cannot find module|Module not found|Cannot resolve module)/.test(e.message)) {\n          console.error(e);\n        }\n\n        console.warn(\"Tried to use the icon '\".concat(name, \"' in a component from 'react-native-paper', but 'react-native-vector-icons' could not be loaded.\"), \"To remove this warning, try installing 'react-native-vector-icons' or use another method to specify icon: https://callstack.github.io/react-native-paper/icons.html.\");\n        isErrorLogged = true;\n      }\n\n      return /*#__PURE__*/React.createElement(Text, _extends({}, rest, {\n        style: [styles.icon, {\n          color: color,\n          fontSize: size\n        }] // @ts-ignore\n        ,\n        pointerEvents: \"none\"\n      }), \"\\u25A1\");\n    };\n  }\n}\n\nexport var accessibilityProps = Platform.OS === 'web' ? {\n  role: 'img',\n  focusable: false\n} : {\n  accessibilityElementsHidden: true,\n  importantForAccessibility: 'no-hide-descendants'\n};\n\nvar defaultIcon = function defaultIcon(_ref2) {\n  var name = _ref2.name,\n      color = _ref2.color,\n      size = _ref2.size,\n      direction = _ref2.direction,\n      allowFontScaling = _ref2.allowFontScaling;\n  return /*#__PURE__*/React.createElement(MaterialCommunityIcons, _extends({\n    allowFontScaling: allowFontScaling,\n    name: name,\n    color: color,\n    size: size,\n    style: [{\n      transform: [{\n        scaleX: direction === 'rtl' ? -1 : 1\n      }]\n    }, styles.icon],\n    pointerEvents: \"none\"\n  }, accessibilityProps));\n};\n\nvar styles = StyleSheet.create({\n  icon: {\n    backgroundColor: 'transparent'\n  }\n});\nexport default defaultIcon;","map":null,"metadata":{},"sourceType":"module"}