{"ast":null,"code":"import _defineProperty2 from \"/Users/omergoldberg/dev/rtl/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/omergoldberg/dev/rtl/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/omergoldberg/dev/rtl/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/omergoldberg/dev/rtl/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/omergoldberg/dev/rtl/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/omergoldberg/dev/rtl/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { View, Animated, TextInput as NativeTextInput, StyleSheet, I18nManager, Platform } from 'react-native';\nimport color from 'color';\nimport InputLabel from './Label/InputLabel';\nimport TextInputAdornment from './Adornment/TextInputAdornment';\nimport { MAXIMIZED_LABEL_FONT_SIZE, MINIMIZED_LABEL_FONT_SIZE, LABEL_WIGGLE_X_OFFSET, ADORNMENT_SIZE, FLAT_INPUT_OFFSET } from './constants';\nimport { calculateLabelTopPosition, calculateInputHeight, calculatePadding, adjustPaddingFlat, interpolatePlaceholder, calculateFlatAffixTopPosition, calculateFlatInputHorizontalPadding } from './helpers';\nimport { getAdornmentConfig, getAdornmentStyleAdjustmentForNativeInput } from './Adornment/TextInputAdornment';\nimport { AdornmentSide, AdornmentType } from './Adornment/enums';\nvar MINIMIZED_LABEL_Y_OFFSET = -18;\nvar LABEL_PADDING_TOP = 30;\nvar LABEL_PADDING_TOP_DENSE = 24;\nvar MIN_HEIGHT = 64;\nvar MIN_DENSE_HEIGHT_WL = 52;\nvar MIN_DENSE_HEIGHT = 40;\n\nvar TextInputFlat = /*#__PURE__*/function (_React$Component) {\n  _inherits(TextInputFlat, _React$Component);\n\n  var _super = _createSuper(TextInputFlat);\n\n  function TextInputFlat() {\n    _classCallCheck(this, TextInputFlat);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(TextInputFlat, [{\n    key: \"render\",\n    value: function render() {\n      var _affixTopPosition, _onAffixChange, _topPosition;\n\n      var _this$props = this.props,\n          disabled = _this$props.disabled,\n          editable = _this$props.editable,\n          label = _this$props.label,\n          error = _this$props.error,\n          selectionColor = _this$props.selectionColor,\n          underlineColor = _this$props.underlineColor,\n          dense = _this$props.dense,\n          style = _this$props.style,\n          theme = _this$props.theme,\n          render = _this$props.render,\n          multiline = _this$props.multiline,\n          parentState = _this$props.parentState,\n          innerRef = _this$props.innerRef,\n          onFocus = _this$props.onFocus,\n          forceFocus = _this$props.forceFocus,\n          onBlur = _this$props.onBlur,\n          onChangeText = _this$props.onChangeText,\n          onLayoutAnimatedText = _this$props.onLayoutAnimatedText,\n          onLeftAffixLayoutChange = _this$props.onLeftAffixLayoutChange,\n          onRightAffixLayoutChange = _this$props.onRightAffixLayoutChange,\n          left = _this$props.left,\n          right = _this$props.right,\n          rest = _objectWithoutProperties(_this$props, [\"disabled\", \"editable\", \"label\", \"error\", \"selectionColor\", \"underlineColor\", \"dense\", \"style\", \"theme\", \"render\", \"multiline\", \"parentState\", \"innerRef\", \"onFocus\", \"forceFocus\", \"onBlur\", \"onChangeText\", \"onLayoutAnimatedText\", \"onLeftAffixLayoutChange\", \"onRightAffixLayoutChange\", \"left\", \"right\"]);\n\n      var colors = theme.colors,\n          fonts = theme.fonts;\n      var font = fonts.regular;\n      var hasActiveOutline = parentState.focused || error;\n\n      var _ref = StyleSheet.flatten(style) || {},\n          fontSizeStyle = _ref.fontSize,\n          fontWeight = _ref.fontWeight,\n          height = _ref.height,\n          paddingHorizontal = _ref.paddingHorizontal,\n          viewStyle = _objectWithoutProperties(_ref, [\"fontSize\", \"fontWeight\", \"height\", \"paddingHorizontal\"]);\n\n      var fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n      var isPaddingHorizontalPassed = paddingHorizontal !== undefined && typeof paddingHorizontal === 'number';\n      var adornmentConfig = getAdornmentConfig({\n        left: left,\n        right: right\n      });\n\n      var _calculateFlatInputHo = calculateFlatInputHorizontalPadding({\n        adornmentConfig: adornmentConfig\n      }),\n          paddingLeft = _calculateFlatInputHo.paddingLeft,\n          paddingRight = _calculateFlatInputHo.paddingRight;\n\n      if (isPaddingHorizontalPassed) {\n        paddingLeft = paddingHorizontal;\n        paddingRight = paddingHorizontal;\n      }\n\n      var leftLayout = parentState.leftLayout,\n          rightLayout = parentState.rightLayout;\n      var rightAffixWidth = right ? rightLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n      var leftAffixWidth = left ? leftLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n      var adornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput({\n        adornmentConfig: adornmentConfig,\n        rightAffixWidth: rightAffixWidth,\n        leftAffixWidth: leftAffixWidth,\n        inputOffset: FLAT_INPUT_OFFSET\n      });\n      var inputTextColor, activeColor, underlineColorCustom, placeholderColor, errorColor;\n\n      if (disabled) {\n        inputTextColor = activeColor = color(colors.text).alpha(0.54).rgb().string();\n        placeholderColor = colors.disabled;\n        underlineColorCustom = 'transparent';\n      } else {\n        inputTextColor = colors.text;\n        activeColor = error ? colors.error : colors.primary;\n        placeholderColor = colors.placeholder;\n        errorColor = colors.error;\n        underlineColorCustom = underlineColor || colors.disabled;\n      }\n\n      var containerStyle = {\n        backgroundColor: theme.dark ? color(colors.background).lighten(0.24).rgb().string() : color(colors.background).darken(0.06).rgb().string(),\n        borderTopLeftRadius: theme.roundness,\n        borderTopRightRadius: theme.roundness\n      };\n      var labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n      var fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n      var labelWidth = parentState.labelLayout.width;\n      var labelHeight = parentState.labelLayout.height;\n      var labelHalfWidth = labelWidth / 2;\n      var labelHalfHeight = labelHeight / 2;\n      var baseLabelTranslateX = (I18nManager.isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2) + (1 - labelScale) * (I18nManager.isRTL ? -1 : 1) * paddingLeft;\n      var minInputHeight = dense ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) - LABEL_PADDING_TOP_DENSE : MIN_HEIGHT - LABEL_PADDING_TOP;\n      var inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n      var topPosition = calculateLabelTopPosition(labelHeight, inputHeight, multiline && height ? 0 : !height ? minInputHeight / 2 : 0);\n\n      if (height && typeof height !== 'number') {\n        // eslint-disable-next-line\n        console.warn('Currently we support only numbers in height prop');\n      }\n\n      var paddingSettings = {\n        height: height ? +height : null,\n        labelHalfHeight: labelHalfHeight,\n        offset: FLAT_INPUT_OFFSET,\n        multiline: multiline ? multiline : null,\n        dense: dense ? dense : null,\n        topPosition: topPosition,\n        fontSize: fontSize,\n        label: label,\n        scale: fontScale,\n        isAndroid: Platform.OS === 'android',\n        styles: StyleSheet.flatten(dense ? styles.inputFlatDense : styles.inputFlat)\n      };\n      var pad = calculatePadding(paddingSettings);\n      var paddingFlat = adjustPaddingFlat(_objectSpread(_objectSpread({}, paddingSettings), {}, {\n        pad: pad\n      }));\n      var baseLabelTranslateY = -labelHalfHeight - (topPosition + MINIMIZED_LABEL_Y_OFFSET);\n      var placeholderOpacity = hasActiveOutline ? interpolatePlaceholder(parentState.labeled, hasActiveOutline) : parentState.labelLayout.measured ? 1 : 0;\n      var minHeight = height || (dense ? label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT : MIN_HEIGHT);\n      var flatHeight = inputHeight + (!height ? dense ? LABEL_PADDING_TOP_DENSE : LABEL_PADDING_TOP : 0);\n      var iconTopPosition = (flatHeight - ADORNMENT_SIZE) / 2;\n      var leftAffixTopPosition = leftLayout.height ? calculateFlatAffixTopPosition(_objectSpread(_objectSpread({\n        height: flatHeight\n      }, paddingFlat), {}, {\n        affixHeight: leftLayout.height\n      })) : null;\n      var rightAffixTopPosition = rightLayout.height ? calculateFlatAffixTopPosition(_objectSpread(_objectSpread({\n        height: flatHeight\n      }, paddingFlat), {}, {\n        affixHeight: rightLayout.height\n      })) : null;\n      var labelProps = {\n        label: label,\n        onLayoutAnimatedText: onLayoutAnimatedText,\n        placeholderOpacity: placeholderOpacity,\n        error: error,\n        placeholderStyle: styles.placeholder,\n        baseLabelTranslateY: baseLabelTranslateY,\n        baseLabelTranslateX: baseLabelTranslateX,\n        font: font,\n        fontSize: fontSize,\n        fontWeight: fontWeight,\n        labelScale: labelScale,\n        wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n        topPosition: topPosition,\n        paddingOffset: {\n          paddingLeft: paddingLeft,\n          paddingRight: paddingRight\n        },\n        hasActiveOutline: hasActiveOutline,\n        activeColor: activeColor,\n        placeholderColor: placeholderColor,\n        errorColor: errorColor\n      };\n      var affixTopPosition = (_affixTopPosition = {}, _defineProperty2(_affixTopPosition, AdornmentSide.Left, leftAffixTopPosition), _defineProperty2(_affixTopPosition, AdornmentSide.Right, rightAffixTopPosition), _affixTopPosition);\n      var onAffixChange = (_onAffixChange = {}, _defineProperty2(_onAffixChange, AdornmentSide.Left, onLeftAffixLayoutChange), _defineProperty2(_onAffixChange, AdornmentSide.Right, onRightAffixLayoutChange), _onAffixChange);\n      var adornmentProps = {\n        adornmentConfig: adornmentConfig,\n        forceFocus: forceFocus,\n        topPosition: (_topPosition = {}, _defineProperty2(_topPosition, AdornmentType.Affix, affixTopPosition), _defineProperty2(_topPosition, AdornmentType.Icon, iconTopPosition), _topPosition),\n        onAffixChange: onAffixChange,\n        isTextInputFocused: this.props.parentState.focused\n      };\n\n      if (adornmentConfig.length) {\n        adornmentProps = _objectSpread(_objectSpread({}, adornmentProps), {}, {\n          left: left,\n          right: right,\n          textStyle: _objectSpread(_objectSpread({}, font), {}, {\n            fontSize: fontSize,\n            fontWeight: fontWeight\n          }),\n          visible: this.props.parentState.labeled\n        });\n      }\n\n      return /*#__PURE__*/React.createElement(View, {\n        style: [containerStyle, viewStyle]\n      }, /*#__PURE__*/React.createElement(Underline, {\n        parentState: parentState,\n        underlineColorCustom: underlineColorCustom,\n        error: error,\n        colors: colors,\n        activeColor: activeColor\n      }), /*#__PURE__*/React.createElement(View, {\n        style: {\n          paddingTop: 0,\n          paddingBottom: 0,\n          minHeight: minHeight\n        }\n      }, /*#__PURE__*/React.createElement(InputLabel, {\n        parentState: parentState,\n        labelProps: labelProps\n      }), render === null || render === void 0 ? void 0 : render(_objectSpread(_objectSpread({}, rest), {}, {\n        ref: innerRef,\n        onChangeText: onChangeText,\n        // @ts-ignore\n        placeholder: label ? parentState.placeholder : this.props.placeholder,\n        placeholderTextColor: placeholderColor,\n        editable: !disabled && editable,\n        selectionColor: typeof selectionColor === 'undefined' ? activeColor : selectionColor,\n        onFocus: onFocus,\n        onBlur: onBlur,\n        underlineColorAndroid: 'transparent',\n        multiline: multiline,\n        style: [styles.input, {\n          paddingLeft: paddingLeft,\n          paddingRight: paddingRight\n        }, !multiline || multiline && height ? {\n          height: flatHeight\n        } : {}, paddingFlat, _objectSpread(_objectSpread({}, font), {}, {\n          fontSize: fontSize,\n          fontWeight: fontWeight,\n          color: inputTextColor,\n          textAlignVertical: multiline ? 'top' : 'center'\n        }), adornmentStyleAdjustmentForNativeInput]\n      }))), /*#__PURE__*/React.createElement(TextInputAdornment, adornmentProps));\n    }\n  }]);\n\n  return TextInputFlat;\n}(React.Component);\n\n_defineProperty(TextInputFlat, \"defaultProps\", {\n  disabled: false,\n  error: false,\n  multiline: false,\n  editable: true,\n  render: function render(props) {\n    return /*#__PURE__*/React.createElement(NativeTextInput, props);\n  }\n});\n\nexport default TextInputFlat;\n\nvar Underline = function Underline(_ref2) {\n  var parentState = _ref2.parentState,\n      error = _ref2.error,\n      colors = _ref2.colors,\n      activeColor = _ref2.activeColor,\n      underlineColorCustom = _ref2.underlineColorCustom;\n  var backgroundColor = parentState.focused ? activeColor : underlineColorCustom;\n  if (error) backgroundColor = colors.error;\n  return /*#__PURE__*/React.createElement(Animated.View, {\n    style: [styles.underline, {\n      backgroundColor: backgroundColor,\n      // Underlines is thinner when input is not focused\n      transform: [{\n        scaleY: parentState.focused ? 1 : 0.5\n      }]\n    }]\n  });\n};\n\nvar styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0\n  },\n  underline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    bottom: 0,\n    height: 2\n  },\n  input: {\n    flexGrow: 1,\n    margin: 0,\n    textAlign: I18nManager.isRTL ? 'right' : 'left',\n    zIndex: 1\n  },\n  inputFlat: {\n    paddingTop: 24,\n    paddingBottom: 4\n  },\n  inputFlatDense: {\n    paddingTop: 22,\n    paddingBottom: 2\n  }\n});","map":null,"metadata":{},"sourceType":"module"}