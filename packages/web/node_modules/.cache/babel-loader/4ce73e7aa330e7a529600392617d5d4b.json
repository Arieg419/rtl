{"ast":null,"code":"import _defineProperty2 from \"/Users/omergoldberg/dev/rtl/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from 'react';\nimport TextInputIcon, { IconAdornment } from './Icon';\nimport TextInputAffix, { AffixAdornment } from './Affix';\nimport { ADORNMENT_OFFSET } from '../constants';\nimport { Platform } from 'react-native';\nimport { AdornmentSide, AdornmentType } from './enums';\nexport function getAdornmentConfig(_ref) {\n  var left = _ref.left,\n      right = _ref.right;\n  var adornmentConfig = [];\n\n  if (left || right) {\n    [{\n      side: AdornmentSide.Left,\n      adornment: left\n    }, {\n      side: AdornmentSide.Right,\n      adornment: right\n    }].forEach(function (_ref2) {\n      var side = _ref2.side,\n          adornment = _ref2.adornment;\n\n      if (adornment && /*#__PURE__*/React.isValidElement(adornment)) {\n        var type;\n\n        if (adornment.type === TextInputAffix) {\n          type = AdornmentType.Affix;\n        } else if (adornment.type === TextInputIcon) {\n          type = AdornmentType.Icon;\n        }\n\n        adornmentConfig.push({\n          side: side,\n          type: type\n        });\n      }\n    });\n  }\n\n  return adornmentConfig;\n}\nexport function getAdornmentStyleAdjustmentForNativeInput(_ref3) {\n  var adornmentConfig = _ref3.adornmentConfig,\n      leftAffixWidth = _ref3.leftAffixWidth,\n      rightAffixWidth = _ref3.rightAffixWidth,\n      _ref3$inputOffset = _ref3.inputOffset,\n      inputOffset = _ref3$inputOffset === void 0 ? 0 : _ref3$inputOffset;\n\n  if (adornmentConfig.length) {\n    var adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(function (_ref4) {\n      var _ref6;\n\n      var type = _ref4.type,\n          side = _ref4.side;\n      var isWeb = Platform.OS !== 'ios' && Platform.OS !== 'android';\n      var isLeftSide = side === AdornmentSide.Left;\n      var offset = (isLeftSide ? leftAffixWidth : rightAffixWidth) + ADORNMENT_OFFSET;\n      var paddingKey = \"padding\".concat(captalize(side));\n      if (isWeb) return _defineProperty2({}, paddingKey, offset);\n      var isAffix = type === AdornmentType.Affix;\n      var marginKey = \"margin\".concat(captalize(side));\n      return _ref6 = {}, _defineProperty2(_ref6, marginKey, isAffix ? 0 : offset), _defineProperty2(_ref6, paddingKey, isAffix ? offset : inputOffset), _ref6;\n    });\n    var allStyleAdjustmentsMerged = adornmentStyleAdjustmentForNativeInput.reduce(function (mergedStyles, currentStyle) {\n      return _objectSpread(_objectSpread({}, mergedStyles), currentStyle);\n    }, {});\n    return allStyleAdjustmentsMerged;\n  } else {\n    return [{}];\n  }\n}\n\nvar captalize = function captalize(text) {\n  return text.charAt(0).toUpperCase() + text.slice(1);\n};\n\nvar TextInputAdornment = function TextInputAdornment(_ref7) {\n  var adornmentConfig = _ref7.adornmentConfig,\n      left = _ref7.left,\n      right = _ref7.right,\n      onAffixChange = _ref7.onAffixChange,\n      textStyle = _ref7.textStyle,\n      visible = _ref7.visible,\n      topPosition = _ref7.topPosition,\n      isTextInputFocused = _ref7.isTextInputFocused,\n      forceFocus = _ref7.forceFocus;\n\n  if (adornmentConfig.length) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, adornmentConfig.map(function (_ref8) {\n      var type = _ref8.type,\n          side = _ref8.side;\n      var inputAdornmentComponent;\n\n      if (side === AdornmentSide.Left) {\n        inputAdornmentComponent = left;\n      } else if (side === AdornmentSide.Right) {\n        inputAdornmentComponent = right;\n      }\n\n      var commonProps = {\n        key: side,\n        side: side,\n        testID: \"\".concat(side, \"-\").concat(type, \"-adornment\"),\n        isTextInputFocused: isTextInputFocused\n      };\n\n      if (type === AdornmentType.Icon) {\n        return /*#__PURE__*/React.createElement(IconAdornment, _extends({}, commonProps, {\n          icon: inputAdornmentComponent,\n          topPosition: topPosition[AdornmentType.Icon],\n          forceFocus: forceFocus\n        }));\n      } else if (type === AdornmentType.Affix) {\n        return /*#__PURE__*/React.createElement(AffixAdornment, _extends({}, commonProps, {\n          topPosition: topPosition[AdornmentType.Affix][side],\n          affix: inputAdornmentComponent,\n          textStyle: textStyle,\n          onLayout: onAffixChange[side],\n          visible: visible\n        }));\n      } else {\n        return null;\n      }\n    }));\n  } else {\n    return null;\n  }\n};\n\nexport default TextInputAdornment;","map":null,"metadata":{},"sourceType":"module"}