{"ast":null,"code":"import _classCallCheck from \"/Users/omergoldberg/dev/rtl/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/omergoldberg/dev/rtl/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/omergoldberg/dev/rtl/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/omergoldberg/dev/rtl/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/omergoldberg/dev/rtl/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/omergoldberg/dev/rtl/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { Animated, BackHandler, Easing, StyleSheet, TouchableWithoutFeedback } from 'react-native';\nimport SafeAreaView from 'react-native-safe-area-view';\nimport Surface from './Surface';\nimport { withTheme } from '../core/theming';\nvar DEFAULT_DURATION = 220;\n/**\n * The Modal component is a simple way to present content above an enclosing view.\n * To render the `Modal` above other components, you'll need to wrap it with the [`Portal`](portal.html) component.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/modal.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Modal, Portal, Text, Button, Provider } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const showModal = () => setVisible(true);\n *\n *   const hideModal = () => setVisible(false);\n *\n *   return (\n *     <Provider>\n *       <Portal>\n *         <Modal visible={visible} onDismiss={hideModal}>\n *           <Text>Example Modal</Text>\n *         </Modal>\n *         <Button style={{marginTop: 30}} onPress={showModal}>\n *           Show\n *         </Button>\n *       </Portal>\n *     </Provider>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nvar Modal = /*#__PURE__*/function (_React$Component) {\n  _inherits(Modal, _React$Component);\n\n  var _super = _createSuper(Modal);\n\n  function Modal() {\n    var _this;\n\n    _classCallCheck(this, Modal);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      opacity: new Animated.Value(_this.props.visible ? 1 : 0),\n      rendered: _this.props.visible\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleBack\", function () {\n      if (_this.props.dismissable) {\n        _this.hideModal();\n      }\n\n      return true;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"showModal\", function () {\n      BackHandler.removeEventListener('hardwareBackPress', _this.handleBack);\n      BackHandler.addEventListener('hardwareBackPress', _this.handleBack);\n      var opacity = _this.state.opacity;\n      var scale = _this.props.theme.animation.scale;\n      Animated.timing(opacity, {\n        toValue: 1,\n        duration: scale * DEFAULT_DURATION,\n        easing: Easing.out(Easing.cubic),\n        useNativeDriver: true\n      }).start();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"hideModal\", function () {\n      BackHandler.removeEventListener('hardwareBackPress', _this.handleBack);\n      var opacity = _this.state.opacity;\n      var scale = _this.props.theme.animation.scale;\n      Animated.timing(opacity, {\n        toValue: 0,\n        duration: scale * DEFAULT_DURATION,\n        easing: Easing.out(Easing.cubic),\n        useNativeDriver: true\n      }).start(function (_ref) {\n        var finished = _ref.finished;\n\n        if (!finished) {\n          return;\n        }\n\n        if (_this.props.visible && _this.props.onDismiss) {\n          _this.props.onDismiss();\n        }\n\n        if (_this.props.visible) {\n          _this.showModal();\n        } else {\n          _this.setState({\n            rendered: false\n          });\n        }\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(Modal, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.visible !== this.props.visible) {\n        if (this.props.visible) {\n          this.showModal();\n        } else {\n          this.hideModal();\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      BackHandler.removeEventListener('hardwareBackPress', this.handleBack);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          rendered = _this$state.rendered,\n          opacity = _this$state.opacity;\n      if (!rendered) return null;\n      var _this$props = this.props,\n          children = _this$props.children,\n          dismissable = _this$props.dismissable,\n          theme = _this$props.theme,\n          contentContainerStyle = _this$props.contentContainerStyle;\n      var colors = theme.colors;\n      return /*#__PURE__*/React.createElement(Animated.View, {\n        pointerEvents: this.props.visible ? 'auto' : 'none',\n        accessibilityViewIsModal: true,\n        accessibilityLiveRegion: \"polite\",\n        style: StyleSheet.absoluteFill\n      }, /*#__PURE__*/React.createElement(TouchableWithoutFeedback, {\n        disabled: !dismissable,\n        onPress: dismissable ? this.hideModal : undefined\n      }, /*#__PURE__*/React.createElement(Animated.View, {\n        style: [styles.backdrop, {\n          backgroundColor: colors.backdrop,\n          opacity: opacity\n        }]\n      })), /*#__PURE__*/React.createElement(SafeAreaView, {\n        style: styles.wrapper,\n        pointerEvents: \"box-none\"\n      }, /*#__PURE__*/React.createElement(Surface, {\n        style: [{\n          opacity: opacity\n        }, styles.content, contentContainerStyle]\n      }, children)));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      if (nextProps.visible && !prevState.rendered) {\n        return {\n          rendered: true\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return Modal;\n}(React.Component);\n\n_defineProperty(Modal, \"defaultProps\", {\n  dismissable: true,\n  visible: false\n});\n\nexport default withTheme(Modal);\nvar styles = StyleSheet.create({\n  backdrop: {\n    flex: 1\n  },\n  wrapper: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    justifyContent: 'center'\n  }),\n  content: {\n    backgroundColor: 'transparent',\n    justifyContent: 'center'\n  }\n});","map":null,"metadata":{},"sourceType":"module"}